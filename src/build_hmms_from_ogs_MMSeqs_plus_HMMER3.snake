'''
Python snakemake pipeline that build profiles and profile HMMs from unaligned fasta protein familes.
 
Example script execution:
snakemake -s src/build_hmms_from_ogs_MMSeqs_plus_HMMER3.snake --configfile example/config.json -pn
'''

# Imports
import os
import sys
import glob
from src import hmms_add_GA_thresh_and_plot
from src import faMSA_stats

__author__ = 'Chris Rands'

# Inputs
INPUT_DIR = config['in_dir']
INPUT_SUFFIX = config['suffix'].lstrip('.')
EVAL_FOR_HMMSEARCH = config['hmmsearch_evalue']  # recommend 10

# Build wildcard(s)
INPUT_TARGETS = ['.'.join(os.path.basename(item).split('.')[:-1])
                 for item in glob.glob('{}/*.{}'.format(INPUT_DIR, INPUT_SUFFIX))]

# Ommit the actual tool name
PATH_SCORE_OTHERSEQS = config['src_path'].rstrip('/')
PATH_CLUSTAL0 = config['clustal_path'].rstrip('/')
PATH_TRIMAL = config['trimal_path'].rstrip('/')
PATH_HMMER3 = config['hmmer3_path'].rstrip('/')
PATH_MMSEQS2 = config['mmseqs2_path'].rstrip('/')

# Rules

## Generic rule
rule all:
    input:
        # Alignments
        expand('msa/{input_targets}.al.fa', input_targets=INPUT_TARGETS),
        expand('msa_trim/{input_targets}.trim.al.fa', input_targets=INPUT_TARGETS),
        # HMMER3 HMMs
        expand('hmms/{input_targets}.hmm', input_targets=INPUT_TARGETS),
        expand('scores_truePositives/{input_targets}.scores', input_targets=INPUT_TARGETS),
        expand('scores_otherSeqs/{input_targets}.scores', input_targets=INPUT_TARGETS),
        expand('hmms_with_GA_thresholds/{input_targets}.hmm', input_targets=INPUT_TARGETS),
        expand('msa_trim_alignment_stats.txt'),
        # MMSeqs2 Profiles
        expand('msa_trim_stockholm/{input_targets}.trim.al.sth', input_targets=INPUT_TARGETS),
        expand('msa_trim_mmseqs_db/{input_targets}.trim.al.db', input_targets=INPUT_TARGETS),
        expand('msa_trim_mmseqs_profile/{input_targets}.profile', input_targets=INPUT_TARGETS),
        expand('msa_trim_mmseqs_pssm/{input_targets}.pssm', input_targets=INPUT_TARGETS),
        expand('msa_trim_mmseqs_profile/{input_targets}.profile.sk5', input_targets=INPUT_TARGETS),
        expand('msa_trim_mmseqs_input_indexes/{input_targets}.db', input_targets=INPUT_TARGETS),
        expand('scores_mmseqs_positivies/{input_targets}.scores', input_targets=INPUT_TARGETS),

## Alignment rules
rule align:
    input:
        os.path.join(INPUT_DIR, '{input_targets}.%s' % (INPUT_SUFFIX))
    output:
        'msa/{input_targets}.al.fa'
    shell:
        '%s/clustalo --in {input} --out {output} --auto --threads 1' % (PATH_CLUSTAL0)

rule trim:
    input:
        rules.align.output
    output:
        'msa_trim/{input_targets}.trim.al.fa'
    shell:
        '%s/trimal -in {input} -out {output}' % (PATH_TRIMAL)

rule align_stats:
    input:
        expand(rules.trim.output, input_targets=INPUT_TARGETS)
    output:
        'msa_trim_alignment_stats.txt'
    run:
        faMSA_stats.collate_stats([os.path.dirname(input[0])], output[0])

## HMMER3 HMM rules
rule build:
    input:
        rules.trim.output
    output:
        'hmms/{input_targets}.hmm'
    log:
        'hmms_logs/{input_targets}.hmm_build.log'
    shell:
        '%s/hmmbuild -o {log} --cpu 1 --amino {output} {input}' % (PATH_HMMER3)

rule score_truePositives:
    input:
        in1 = rules.build.output,  # I think it's safe to assume that order of the in1 and in2 is the same
        # because the list comprhension that builds the input_targets retains the order
        in2 = os.path.join(INPUT_DIR, '{input_targets}.%s' % (INPUT_SUFFIX))
    output:
        'scores_truePositives/{input_targets}.scores'
    shell:
        '%s/hmmsearch -E %s --cpu 1 --tblout {output} {input.in1} {input.in2}' % (PATH_HMMER3, EVAL_FOR_HMMSEARCH)

rule score_otherSeqs:
    input:
        rules.build.output
    output:
        'scores_otherSeqs/{input_targets}.scores'
    shell:
        'python3 %s %s {input} {output} %s %s %s' % (os.path.join(PATH_SCORE_OTHERSEQS, 'score_otherseqs_hmms.py'), INPUT_DIR, EVAL_FOR_HMMSEARCH, INPUT_SUFFIX, PATH_HMMER3)

rule add_gathering_thresholds:  # model-specific bitscore thresholds for hmms and pdf of plots
    input:
        in1 = rules.score_truePositives.output,
        in2 = rules.score_otherSeqs.output,
        in3 = rules.build.output
    output:
        'hmms_with_GA_thresholds/{input_targets}.hmm'
    run:
        with open('add_gathering_threshold_and_plot.err', 'w') as error_f:
            sys.stderr = error_f
            hmms_add_GA_thresh_and_plot.main(os.path.dirname(input.in1[0]),
                                             os.path.dirname(input.in2[0]),
                                             os.path.dirname(input.in3[0]),
                                             os.path.dirname(output[0]),
                                             'hmm_bitscore_plots')

## MMSeqs2 rules
rule MSAfasta_to_stockholm:
    input:
        rules.trim.output
    output:
        'msa_trim_stockholm/{input_targets}.trim.al.sth'
    shell:
        'python3 %s/faMSA_to_StockholmMSA.py {input} False {output}' %(PATH_SCORE_OTHERSEQS)

rule stockholm_to_MSAdb:
    input:
        rules.MSAfasta_to_stockholm.output
    output:
        'msa_trim_mmseqs_db/{input_targets}.trim.al.db'
    shell:
        '%s/mmseqs convertmsa {input} {output}' %(PATH_MMSEQS2)

rule MSAdb_to_profile:
    input:
        rules.stockholm_to_MSAdb.output
    output:
        'msa_trim_mmseqs_profile/{input_targets}.profile'
    shell:
        '%s/mmseqs msa2profile {input} {output} --match-mode 1 --msa-type 2 --threads 1' %(PATH_MMSEQS2)

rule profile_to_pssm:
    input:
        rules.MSAdb_to_profile.output
    output:
        'msa_trim_mmseqs_pssm/{input_targets}.pssm'
    shell:
        '%s/mmseqs  profile2pssm {input} {output} --threads 1' %(PATH_MMSEQS2)

rule profile_to_indexdb:
    input:
        rules.MSAdb_to_profile.output
    output:
        out1 = 'msa_trim_mmseqs_profile/{input_targets}.profile.sk5',
        tmp = temp('{input_targets}_tmp1/')
    shell:
        '%s/mmseqs createindex {input} {output.tmp} -k 5 -s 7' %(PATH_MMSEQS2)

rule input_seqs_to_indexes:
    input:
        os.path.join(INPUT_DIR, '{input_targets}.%s' % (INPUT_SUFFIX))
    output:
        'msa_trim_mmseqs_input_indexes/{input_targets}.db'
    shell:
        '%s/mmseqs createdb {input} {output}' %(PATH_MMSEQS2)

rule score_mmseqs_positives:
    input:
        in1 = rules.MSAdb_to_profile.output,
        in2 = rules.input_seqs_to_indexes.output
    output:
        out1 = 'scores_mmseqs_positivies/{input_targets}.scores',
        tmp = temp('{input_targets}_tmp2/')
    shell:
        '%s/mmseqs search {input.in2} {input.in1} {output.out1} {output.tmp}' %(PATH_MMSEQS2)
