configfile: "config.yaml"

GENOMES = config["genome_name"]
THREADS = config["threads"]
QUERY_DIR = config["query_dir"]
TMP_DIR = config["tmp_dir"]
SEARCH_OUT_DIR = config["search_dir"]
OG_SEQS_DIR = config["og_seqs_dir"]
OG_IDS = [i for i in range(6044) if os.path.isfile('{0}og_{1}.fasta'.format(OG_SEQS_DIR, i))]
MSA_DIR = config["msa_dir"]
MMSEQS_INPUT_DIR = config["mmseqs_input_dir"]
PROFILE_DIR = config["profile_dir"]
OUTPUT_TSV_DIR = config["output_tsv_dir"]
PATH_TO_SNAKEFILE = config["path_to_snakefile"]

rule all:
    input:
        #["data/msa/og_{}.trim.al.fa".format(i) for i in range(5)],
        #"data/mmseqs/input/msa_trimmed.db"
        #"data/mmseqs/profile/profile"
        expand("{search_out}{query}.m8", search_out=SEARCH_OUT_DIR, query=GENOMES)
        #expand("{output_tsv}{query}.tsv", output_tsv=OUTPUT_TSV_DIR, query=GENOMES)

rule align:
    input:
        expand('{og_seqs}og_{{og_id}}.fasta', og_seqs=OG_SEQS_DIR)
    output:
        expand('{msa_dir}og_{{og_id}}.al.fa', msa_dir=MSA_DIR)
    threads:
        THREADS
    shell:
        'mafft --quiet {input} > {output}'

rule trim:
    input:
        rules.align.output
    output:
        expand('{msa_dir}og_{{og_id}}.trim.al.fa', msa_dir=MSA_DIR)
    threads:
        THREADS
    run:
        shell('trimal -in {input} -out {output}')
        shell('python {PATH_TO_SNAKEFILE}scripts/faMSAPercID.py {output}')

rule MSAfasta_to_stockholm:
    input:
        alignment_files = expand(rules.trim.output, og_id=OG_IDS)
    output:
        stockholm_file = '{mmseqs_input_dir}msa_trimmed.sth'.format(mmseqs_input_dir=MMSEQS_INPUT_DIR)
    params:
        family_ids = OG_IDS
    script:
        "scripts/faMSA_to_StockholmMSA.py"

rule stockholm_to_MSAdb:
    input:
        rules.MSAfasta_to_stockholm.output
    output:
        expand('{mmseqs_input_dir}msa_trimmed.db', mmseqs_input_dir=MMSEQS_INPUT_DIR)
    shell:
        'mmseqs convertmsa {input} {output}'

rule MSAdb_to_profile:
    input:
        rules.stockholm_to_MSAdb.output
    output:
        expand('{profile_dir}profile', profile_dir=PROFILE_DIR)
    shell:
        'mmseqs msa2profile {input} {output} '
        '--match-mode 1 --msa-type 2 --threads {THREADS}'

rule fasta_to_db:
    input:
        os.path.join(QUERY_DIR, '{query}.fs')
    output:
        os.path.join(QUERY_DIR, 'query_dbs/{query}')
    shell:
        'mmseqs createdb {input} {output}'

rule search_mmseqs:
    input:
        profile = rules.MSAdb_to_profile.output,
        fasta = rules.fasta_to_db.output
    output:
        db = temp(expand('{search_out}{{query}}.db', search_out=SEARCH_OUT_DIR)),
        index = temp(expand('{search_out}{{query}}.db.index', search_out=SEARCH_OUT_DIR)),
        tsv = expand('{search_out}{{query}}.m8', search_out=SEARCH_OUT_DIR),
    run:
        shell('mmseqs search --threads {THREADS} {input.fasta} {input.profile} {output.db} {TMP_DIR}')
        shell('mmseqs convertalis --threads {threads} {input.fasta} {input.profile} {output.db} {output.tsv}')

rule create_output_tsv:
    input:
        rules.search_mmseqs.output.tsv
    output:
        expand('{output_tsv}{{query}}.tsv', output_tsv=OUTPUT_TSV_DIR)
    script:
        'scripts/filter_matches.py'
